{"version":3,"sources":["components/SearchBox.js","components/Album.js","components/AlbumList.js","components/Photo.js","components/PhotoList.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","align","type","onChange","placeholder","Album","id","title","findthumbnail","photos","find","photo","albumId","to","width","alt","src","url","AlbumList","albums","map","album","i","key","Photo","PhotoId","thumbnailUrl","href","target","rel","PhotoList","useParams","parseInt","filteredPhotosArray","filter","App","onSearchChange","event","setState","searchfield","value","state","fetch","then","response","json","this","filteredAlbums","toLowerCase","includes","filteredPhotos","length","exact","path","render","coverClick","onCoverClick","onRouteChange","stateCheck","role","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.df6d6bbc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t <div className='search-box' align='center'>\r\n\t  <input className='search' type='search' onChange={searchChange} placeholder='Search' />\r\n\t </div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Album = ({ id, title, photos}) => {\r\n\tconst findthumbnail = photos.find(photo => photo.albumId === id);\r\n\tif (!findthumbnail) {\r\n\t\treturn (\r\n\t\t\t<div></div>\r\n\t)\r\n\t} return (\r\n\t <div className='polaroid grow'>\r\n\t <Link to={`/react-albums/${id}`}>\r\n\t  \t<img \r\n\t  \t width='90%'\r\n\t \t alt='thumbnail' \r\n\t \t src={findthumbnail.url}\r\n\t \t/>\r\n\t  </Link>\r\n\t  <div className='container-3'>\r\n\t   \t<h4>{title}</h4>\r\n\t  </div>\r\n\t </div>\r\n\t\t);\r\n}\r\n\r\nexport default Album;\r\n","import React from 'react';\r\nimport Album from './Album';\r\n\r\nconst AlbumList = ({ albums, photos }) => {\r\n  return(\r\n\t<div className='container-1'>\r\n\t\t\t{\r\n\t\t\t  albums.map((album, i) => {\r\n\t\t\t\t \treturn (<Album\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\tid={albums[i].id}\r\n\t\t\t\t\t\ttitle={albums[i].title}\r\n\t\t\t\t\t\tphotos={photos}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default AlbumList;","import React from 'react';\r\n\r\n\r\nconst Photo = ({ PhotoId, title, url, thumbnailUrl }) => {\r\n\r\n\treturn (\r\n\t<div className='polaroid grow'>\r\n      <a href={url} target='_blank' rel=\"noopener noreferrer\">\r\n\t   <img \r\n\t   width='70%'\r\n\t   alt='thumbnail' \r\n\t   src={thumbnailUrl}\r\n\t   />\r\n\t  </a>\r\n\t  <div className='container-3'>\r\n\t   \t<h4>{title}</h4>\r\n\t  </div>\r\n\t </div>\r\n\t\t);\r\n}\r\n\r\nexport default Photo;\r\n","import React from 'react';\r\nimport Photo from './Photo';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst PhotoList = ({ photos }) => {\r\n\tlet { albumId } = useParams();\r\n\talbumId = parseInt(albumId);\r\n\tconst filteredPhotosArray = photos.filter(photo => photo.albumId === albumId);\r\n  return(\r\n\t<div className='container-2'>\r\n\t\t\t{ \r\n\t\t\t\t \tfilteredPhotosArray.map((photo, i) => {\r\n\t\t\t\t \t\treturn (<Photo\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\tPhotoId={photo.id}\r\n\t\t\t\t\t\ttitle={photo.title}\r\n\t\t\t\t\t\turl={photo.url}\r\n\t\t\t\t\t\tthumbnailUrl={photo.thumbnailUrl}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t \t})\r\n\t\t\t\t}\r\n\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default PhotoList;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport SearchBox from './components/SearchBox';\r\nimport AlbumList from './components/AlbumList';\r\nimport PhotoList from './components/PhotoList';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\talbums: [],\r\n\t\t\tphotos: [],\r\n\t\t\tsearchfield: '',\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/albums')\r\n        .then(response => response.json())\r\n        .then(albums => this.setState({ albums : albums }))\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/photos')\r\n        .then(response => response.json())\r\n        .then(photos => this.setState({ photos : photos }))\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value })\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { albums, photos, searchfield } = this.state;\r\n\t\tconst filteredAlbums = albums.filter(albums => {\r\n\t\t\treturn albums.title.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\tconst filteredPhotos = photos.filter(photos => {\r\n\t\t\treturn photos.title.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\r\n     return (\r\n      <div>\r\n        { !albums.length\r\n          ? (\r\n            <div className='loading'>\r\n              <h1>Loading...</h1>\r\n            <div className=\"spinner-border text-primary\" role=\"status\">\r\n             <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n            </div>\r\n          ) : (\r\n          <Router>\r\n         <Route \r\n         exact={true}\r\n         path='/react-albums/' \r\n         render={() => (\r\n         <div>\r\n         <h1>My Albums</h1>\r\n         <SearchBox searchChange={this.onSearchChange} />\r\n         <AlbumList \r\n          albums={filteredAlbums} \r\n          photos={filteredPhotos}\r\n          coverClick={this.onCoverClick}\r\n          onRouteChange={this.onRouteChange}\r\n          searchChange={this.onSearchChange}\r\n         />\r\n         </div>\r\n           )}\r\n         />\r\n         <Route\r\n         path='/react-albums/:albumId'\r\n         render={() => (\r\n         <div>\r\n         <h1>My Photos</h1>\r\n         <SearchBox searchChange={this.onSearchChange} />\r\n         <div className='btn-div'>\r\n         <Link to='/react-albums/'>\r\n         <button className='btn'>Back to Albums</button>\r\n         </Link>\r\n         </div>\r\n         <PhotoList\r\n         photos={filteredPhotos}\r\n         albumId={this.stateCheck}\r\n          />\r\n         </div>\r\n          )}\r\n         />\r\n        </Router>\r\n          )\r\n        }\r\n      </div>\r\n\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}